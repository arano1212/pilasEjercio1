// ejercicio uno 
 Hacer una función que reciba como parámetros una pila, y un número. La función debe retornar tantos elementos como diga el número (segundo parámetro).
Entrada : mifuncion([‘Manzana’,‘Cebolla’,‘Apio’,‘Naranja’,‘Papaya’,‘Sandía’,‘Melón’],4)
Salida: [‘Manzana’,‘Cebolla’,‘Apio’,‘Naranja’].

stack{
    {
        =[]
    }

    push(){

    }

    pop(){

    }

    peek(){

    }
}

iniciar stack
stack.push
Entrada : mifuncion([‘Manzana’,‘Cebolla’,‘Apio’,‘Naranja’,‘Papaya’,‘Sandía’,‘Melón’])


 función (){
    nuevoArray =[];
    if ( let i =[],i >4; i++){
        stack.pop()

    }
     return  nuevoArray

 }

 funcion (Salida: [‘Manzana’,‘Cebolla’,‘Apio’,‘Naranja’].);





 //ejercicio2
  Escribe una función “reemplazar” que tenga como parámetros una pila de elementos de tipo Number, y dos valores también de tipo Number “nuevo” y “viejo”, de forma que si el segundo valor aparece en algún lugar de la pila, sea reemplazado por el primero (Solo la primera vez), y hará pop de los elementos más nuevos.
Entrada: reemplazar([3,2,3,4,6,8,1,2,5,5], 7, 2)
Salida: [3,2,3,4,6,8,1,7]

stack{
    {
        =[]
    }

    push(){

    }

    pop(){

    }

    peek(){

    }

    
    size(){

    }
    

}

iniciar stack
stack push
Entrada: reemplazar([3,2,3,4,6,8,1,2,5,5], 7, 2)

funcion(){
    elemento= pop();
    si ( viejo){
    push.(nuevo);
}no{
    push(elementos)
}
}

 size{
    results
 }

 funcion(Salida: [3,2,3,4,6,8,1,7]);




//ejercicio3
Un conductor maneja de un pueblo origen a un pueblo destino, pasando por varios pueblos. Una vez en el pueblo destino, el conductor debe regresar a casa por el mismo camino. Muestre el camino recorrido tanto de ida como de vuelta.
Recorrido: Pueblo Origen → pueblo 1 → pueblo 2 → destino
Regreso: destino → pueblo 2’ → pueblo 1 → Pueblo Origen

stack{
    {
        =[]
    }

    push(){

    }

    pop(){

    }

}

iniciar stack

funcion automatica{
    tiempo((){
         push
    mostrar en consola ese push

        tiempo((){
         push
        mostrar en consola ese push

            tiempo(){
            push
            mostrar en consola ese push
            
                tiempo((){
                push
                mostrar en consola ese push;
                Recorrido: Pueblo Origen → pueblo 1 → pueblo 2 → destino

                    tiempo((){
                    pop
                    mostrar en consola ese pop

                        tiempo((){
                        pop
                        mostrar en consola ese pop

                            tiempo((){
                            pop
                            mostrar en consola ese pop


                            tiempo((){
                            pop
                            mostrar en consola ese pop

                            Regreso: destino → pueblo 2’ → pueblo 1 → Pueblo Origen

                                } tiempodeEjecucion)

                            } tiempodeEjecucion)    

                        } tiempodeEjecucion)

                    } tiempodeEjecucion)

                } tiempodeEjecucion)

            } tiempodeEjecucion)

        } tiempodeEjecucion)

    } tiempodeEjecucion)
}

automatica();




//ejercico4
Un almacén tiene capacidad para apilar “n” contenedores. 
Cada contenedor tiene un número de identificación. Cuando se desea 
retirar un contenedor específico, deben retirarse primero los 
contenedores que están encima de él y colocarlos en otra pila, 
efectuar el retiro y regresarlos a su respectivo lugar.

stac{
    {
        pila=[]
        pilatemporal=[]
    }

    aplilar(){
        push

    }

    retirar(){
        crear contenedor nuevo = para retirar y aplilar

        si(crear contedeor nuevo. nombredelacaja === nombredelacaja){

            empujar la pila temporal = ala pila

        } no{
            ver las cajas en el contenedor que quedan

        }
    }
}

inicar pila
apilar cajas()

retirar cajas()





